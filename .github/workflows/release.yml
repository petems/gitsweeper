name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude windows/arm64 as it's less common
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Get git commit
        id: commit
        run: echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Set binary name
        id: binary
        run: |
          BINARY_NAME=gitsweeper
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          echo "BINARY_NAME=${BINARY_NAME}" >> "$GITHUB_OUTPUT"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Standard build
          go build -ldflags "-X main.gitCommit=${{ steps.commit.outputs.GIT_COMMIT }} -s -w" \
            -trimpath -a -installsuffix cgo \
            -o "${{ steps.binary.outputs.BINARY_NAME }}" .
          
          # Optimized build
          go build -tags optimized -ldflags "-X main.gitCommit=${{ steps.commit.outputs.GIT_COMMIT }} -s -w" \
            -trimpath -a -installsuffix cgo \
            -o "${{ steps.binary.outputs.BINARY_NAME }}-optimized" .
          
          # Ultra-optimized build
          go build -tags ultra -ldflags "-X main.gitCommit=${{ steps.commit.outputs.GIT_COMMIT }} -s -w" \
            -trimpath -a -installsuffix cgo \
            -o "${{ steps.binary.outputs.BINARY_NAME }}-ultra" .

      - name: Verify binaries
        run: |
          # Test that binaries can be executed and show version
          for binary in "${{ steps.binary.outputs.BINARY_NAME}}"*; do
            if [ -f "$binary" ]; then
              echo "Testing $binary..."
              if [ "${{ matrix.goos }}" = "windows" ]; then
                # Windows binaries need wine for testing on Linux runners
                echo "Skipping Windows binary test on Linux runner"
              else
                # Test version command
                ./"$binary" version || echo "Warning: $binary version command failed"
              fi
            fi
          done

      - name: Create archive
        id: archive
        run: |
          # Create archives for all build variants
          for variant in "" "-optimized" "-ultra"; do
            ARCHIVE_NAME="gitsweeper-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}${variant}"
            BINARY_NAME="${{ steps.binary.outputs.BINARY_NAME }}${variant}"
            
            if [ "${{ matrix.goos }}" = "windows" ]; then
              ARCHIVE_NAME="${ARCHIVE_NAME}.zip"
              zip "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md
            else
              ARCHIVE_NAME="${ARCHIVE_NAME}.tar.gz"
              tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md
            fi
            
            # Generate checksum
            if command -v sha256sum >/dev/null; then
              sha256sum "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
            elif command -v shasum >/dev/null; then
              shasum -a 256 "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
            fi
          done
          
          # Set the main archive name for the upload step
          MAIN_ARCHIVE_NAME="gitsweeper-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            MAIN_ARCHIVE_NAME="${MAIN_ARCHIVE_NAME}.zip"
          else
            MAIN_ARCHIVE_NAME="${MAIN_ARCHIVE_NAME}.tar.gz"
          fi
          echo "ARCHIVE_NAME=${MAIN_ARCHIVE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            gitsweeper-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}*
            gitsweeper-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}*.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate combined checksums
        run: |
          cd artifacts
          find . -name "*.sha256" -exec cat {} \; > ../gitsweeper_${{ steps.version.outputs.VERSION }}_checksums.txt
          cd ..
          # Move all archives to the root for upload
          find ./artifacts -name "gitsweeper-*" -not -name "*.sha256" -exec mv {} . \;

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Changes in ${{ steps.version.outputs.VERSION }}
            
            ### Downloads
            
            Choose the appropriate binary for your platform:
            
            **Standard Builds:**
            - **Linux (x86_64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz`
            - **Linux (ARM64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz`
            - **macOS (Intel)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz`
            - **macOS (Apple Silicon)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz`
            - **Windows (x86_64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-windows-amd64.zip`
            
            **Optimized Builds** (smaller, faster):
            - **Linux (x86_64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-linux-amd64-optimized.tar.gz`
            - **Linux (ARM64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-linux-arm64-optimized.tar.gz`
            - **macOS (Intel)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-darwin-amd64-optimized.tar.gz`
            - **macOS (Apple Silicon)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-darwin-arm64-optimized.tar.gz`
            - **Windows (x86_64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-windows-amd64-optimized.zip`
            
            **Ultra-Optimized Builds** (smallest, fastest, minimal dependencies):
            - **Linux (x86_64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-linux-amd64-ultra.tar.gz`
            - **Linux (ARM64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-linux-arm64-ultra.tar.gz`
            - **macOS (Intel)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-darwin-amd64-ultra.tar.gz`
            - **macOS (Apple Silicon)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-darwin-arm64-ultra.tar.gz`
            - **Windows (x86_64)**: `gitsweeper-${{ steps.version.outputs.VERSION }}-windows-amd64-ultra.zip`
            
            ### Build Variants
            
            This release includes three build variants:
            
            - **Standard**: Full-featured build with all dependencies
            - **Optimized**: Smaller binary with stripped symbols and optimized algorithms
            - **Ultra**: Minimal binary with standard library only, fastest performance
            
            ### Installation
            
            #### Quick Install Script
            
            ```bash
            # Install latest version
            curl -sSfL https://raw.githubusercontent.com/petems/gitsweeper/master/install.sh | sh
            
            # Install specific version
            curl -sSfL https://raw.githubusercontent.com/petems/gitsweeper/master/install.sh | sh -s ${{ steps.version.outputs.VERSION }}
            ```
            
            #### Homebrew (macOS)
            
            ```bash
            brew tap petems/gitsweeper
            brew install gitsweeper
            ```
            
            #### Manual Installation
            
            1. Download the appropriate archive for your platform
            2. Extract the archive
            3. Move the `gitsweeper` binary to a directory in your PATH
            4. Make it executable (Linux/macOS): `chmod +x gitsweeper`
          files: |
            gitsweeper-*
            gitsweeper_*_checksums.txt

      - name: Update Homebrew tap
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # This will be handled by a separate workflow or manually
          echo "Consider updating Homebrew tap at https://github.com/petems/homebrew-gitsweeper"